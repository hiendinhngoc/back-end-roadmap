## Concepts
ðŸ’¡ A Goroutine is a function or method which executes independently and simultaneously in connection with any other Goroutines present in your program

- Creating goroutines
    - Use go keyword in front of function call
    - When using anonymous functions, pass data as local variables
- Synchronization
    - Use sync.WaitGroup to wait for groups of goroutines to complete
    - Use sync.Mutex and sync.RWMutex to protect data access
- Parallelism
    - By default, Go will use CPU threads equal to available cores
    - Change with runtime.GOMAXPROCS
    - More threads can increase performance, but too many can slow it down

## Best Practices

<aside>
ðŸ’¡ Don't create goroutines in libraries

- Let consumers control concurrency
</aside>

<aside>
ðŸ’¡ When creating goroutine, know how it will end

- Avoid subtle memory leaks
</aside>

<aside>
ðŸ’¡ Check for race conditions at compile time

</aside>